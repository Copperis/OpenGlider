import numpy
from openglider.vector.functions import norm, normalize
from openglider.vector.polyline import PolyLine2D

text_vectors = {
    "1": [[0.2, 0.5], [0.6, 1.], [0.6, 0.]],
    "2": [[0.2, 1.], [0.8, 1.], [0.8, 0.5], [0.2, 0.5], [0.2, 0.], [0.8, 0.]],
    "3": [[0.2, 1.], [0.8, 1.], [0.8, 0.5], [0.2, 0.5], [0.8, 0.5], [0.8, 0.], [0.2, 0.]],
    "4": [[0.8, 0.5], [0.2, 0.5], [0.6, 1.], [0.6, 0.]],
    "5": [[0.8, 1.], [0.2, 1.], [0.2, 0.5], [0.8, 0.5], [0.8, 0.], [0.2, 0.]],
    "6": [[0.8, 1.], [0.2, 1.], [0.2, 0.5], [0.8, 0.5], [0.8, 0.], [0.2, 0.], [0.2, 0.5]],
    "7": [[0.2, 1.], [0.8, 1.], [0.4, 0.]],
    "8": [[0.8, 0.5], [0.8, 1.], [0.2, 1.], [0.2, 0.5], [0.8, 0.5], [0.8, 0.], [0.2, 0.], [0.2, 0.5]],
    "9": [[0.8, 0.5], [0.2, 0.5], [0.2, 1.], [0.8, 1.], [0.8, 0.], [0.2, 0.]],
    "0": [[0.2, 0.], [0.2, 1.], [0.8, 1.], [0.8, 0.], [0.2, 0.]],
    "A": [[0.1, 0], [0.5, 1.], [0.9, 0], [0.7, 0.5], [0.3, 0.5]],
    "B": [[0.2, 1.], [0.2, 0], [0.7, 0], [0.8, 0.1], [0.8, 0.4], [0.7, 0.5], [0.2, 0.5], [0.7, 0.5], [0.8, 0.6],
          [0.8, 0.9], [0.7, 1.], [0.2, 1.]],
    "C": [[0.8, 1.], [0.3, 1.], [0.2, 0.9], [0.2, 0.1], [0.3, 0], [0.8, 0]],
    "D": [[0.2, 1.], [0.5, 1.], [0.7, 0.9], [0.8, 0.8], [0.9, 0.6], [0.9, 0.4], [0.8, 0.2], [0.7, 0.1], [0.5, 0],
          [0.2, 0], [0.2, 1.]],
    "E": [[0.8, 1.], [0.2, 1.], [0.2, 0.5], [0.8, 0.5], [0.2, 0.5], [0.2, 0], [0.8, 0]],
    "F": [[0.8, 1.], [0.2, 1.], [0.2, 0.5], [0.7, 0.5], [0.2, 0.5], [0.2, 0]],
    "G": [[0.8, 1.], [0.3, 1.], [0.2, 0.9], [0.2, 0.1], [0.3, 0], [0.7, 0], [0.8, 0.1], [0.8, 0.4], [0.7, 0.5],
          [0.5, 0.5]],
    "H": [[0.2, 1.], [0.2, 0], [0.2, 0.5], [0.8, 0.5], [0.8, 0], [0.8, 1.]],
    "I": [[0.4, 1.], [0.6, 1.], [0.5, 1.], [0.5, 0], [0.4, 0], [0.7, 0]],
    "J": [[0.3, 1.], [0.6, 1.], [0.6, 0.1], [0.5, 0], [0.4, 0.1], [0.4, 0.2]],
    "K": [[0.2, 1.], [0.2, 0], [0.2, 0.5], [0.8, 1.], [0.2, 0.5], [0.8, 0]],
    "L": [[0.2, 1.], [0.2, 0], [0.8, 0]],
    "M": [[0.2, 0], [0.2, 1.], [0.5, 0.5], [0.8, 1.], [0.8, 0]],
    "N": [[0.2, 0], [0.2, 1.], [0.8, 0], [0.8, 1.]],
    "O": [[0.2, 0.9], [0.2, 0.1], [0.3, 0.], [0.7, 0.], [0.8, 0.1], [0.8, 0.9], [0.7, 1.], [0.3, 1.], [0.2, 0.9]],
    "P": [[0.2, 0.], [0.2, 0.9], [0.3, 1.], [0.7, 1.], [0.8, 0.9], [0.8, 0.6], [0.7, 0.5], [0.2, 0.5]],
    "Q": [[0.2, 0.9], [0.3, 1.], [0.8, 1.], [0.9, 0.9], [0.9, 0.1], [0.8, 0.], [0.9, 0], [0.3, 0], [0.2, 0.1],
          [0.2, 0.9]],
    "R": [[0.2, 0.], [0.2, 0.9], [0.3, 1.], [0.7, 1.], [0.8, 0.9], [0.8, 0.6], [0.7, 0.5], [0.2, 0.5], [0.8, 0.]],
    "S": [[0.8, 0.9], [0.7, 1.], [0.3, 1.], [0.2, 0.9], [0.2, 0.6], [0.3, 0.5], [0.7, 0.5], [0.8, 0.4], [0.8, 0.1],
          [0.7, 0], [0.3, 0], [0.2, 0.1]],
    "T": [[0.2, 1.], [0.8, 1.], [0.5, 1.], [0.5, 0]],
    "U": [[0.2, 1.], [0.2, 0.1], [0.3, 0], [0.7, 0], [0.8, 0.1], [0.8, 1.]],
    "V": [[0.2, 1.], [0.5, 0], [0.8, 1.]],
    "W": [[0.2, 1.], [0.3, 0], [0.5, 0.5], [0.7, 0], [0.8, 1.]],
    "X": [[0.2, 1.], [0.8, 0], [0.5, 0.5], [0.8, 1.], [0.2, 0]],
    "Y": [[0.2, 1.], [0.2, 0.6], [0.3, 0.5], [0.7, 0.5], [0.8, 0.6], [0.8, 1.], [0.8, 0.6], [0.7, 0.5], [0.8, 0.4],
          [0.8, 0.1], [0.7, 0]],
    "Z": [[0.2, 1.], [0.8, 1.], [0.2, 0], [0.8, 0]],
    "_": [[0.2, 0.], [0.8, 0.]],
    " ": [],
    ".": [[0.48, 0], [0.52, 0], [0.52, 0.04], [0.48, 0.04], [0.48, 0]]
}


class Text():
    def __init__(self, text, p1, p2, size=None, align="left", height=1, space=0.2, valign=0.5):
        self.text = text
        self.p1 = p1
        self.p2 = p2
        self.size = size
        self.height = height
        self.space = space
        self.align = align
        self.valign = valign

    def __json__(self):
        return {
            "text": self.text,
            "p1": self.p1,
            "p2": self.p2,
            "size": self.size,
            "height": self.height,
            "space": self.space,
            "align": self.align
        }

    def get_vectors(self):
        # todo: add valign (space)
        vectors = []
        diff = (self.p2 - self.p1)/len(self.text)
        if self.size is not None:
            diff = normalize(diff) * self.size

        if self.align == "left":
            p1 = self.p1[:]
        elif self.align == "center":
            p1 = self.p1 + (self.p2 - self.p1)/2 - len(self.text)/2 * diff
        elif self.align == "right":
            p1 = self.p2 - len(self.text) * diff
        else:
            raise ValueError

        r_x, r_y = diff[0], diff[1]

        rot = numpy.array([[r_x, -r_y], [r_y, r_x]])

        p1 += numpy.array([-r_y, r_x]) * (self.valign - 0.5)

        for letter in self.text.upper():
            try:
                if text_vectors[letter]:
                    vectors.append(
                        PolyLine2D([p1 + rot.dot(p) for p in text_vectors[letter]])
                    )
                p1 += diff
            except KeyError:
                raise KeyError("Letter {} from word '{}' not available".format(letter, self.text.upper()))
        return vectors

def get_text_vector(text, p1, p2, height=1, space=0.2):
    width = (p2-p1)/len(text)
    x, y = normalize([width.dot([1, 0]), width.dot([0, 1])])
    rot = numpy.array([[x, -y], [y, x]]) * norm(width) * [1, height]
    p0 = p1.copy() + rot.dot([0, (1-height)/2 + space])
    vectors = []
    for letter in text.upper():
        if letter != " ":
            vectors.append(
                PolyLine2D([p0 + rot.dot(p) for p in text_vectors[letter]]))
        p0 += width
    return vectors
